package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/krevetkou/test-ozon/app/generated"
	"github.com/krevetkou/test-ozon/app/models"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post models.PostInput) (*models.PostResponse, error) {
	if post.Title == "" || post.Text == "" {
		return &models.PostResponse{
			Message: "Title or text are required",
			Status:  http.StatusBadRequest,
		}, nil
	}

	p, err := r.PostService.CreatePost(&models.Post{
		Title:          post.Title,
		Text:           post.Text,
		CreatedAt:      time.Now(),
		CanBeCommented: post.CanBeCommented,
	})
	if err != nil {
		fmt.Println("the error with this: ", err)
		return &models.PostResponse{
			Message: err.Error(),
			Status:  http.StatusInternalServerError,
		}, nil
	}

	return &models.PostResponse{
		Message: "Successfully created post",
		Status:  http.StatusCreated,
		Data:    p,
	}, nil
}

// UpdatePost is the resolver for the UpdatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, comment models.CommentInput) (*models.PostResponse, error) {
	post, err := r.PostService.GetPostByID(id)
	if err != nil {
		return &models.PostResponse{
			Message: "Error getting the post",
			Status:  http.StatusInternalServerError,
		}, nil
	}

	post.Comments = append(post.Comments, &models.Comment{Comment: comment.Comment})

	_, err = r.PostService.UpdatePost(post)
	if err != nil {
		return &models.PostResponse{
			Message: "Error creating comment",
			Status:  http.StatusInternalServerError,
		}, nil
	}

	return &models.PostResponse{
		Message: "Successfully added comment",
		Status:  http.StatusOK,
		Data:    post,
	}, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context) (*models.PostResponse, error) {
	posts, err := r.PostService.GetAllPosts()
	if err != nil {
		log.Println("getting all posts error: ", err)
		return &models.PostResponse{
			Message: "Something went wrong getting all posts.",
			Status:  http.StatusInternalServerError,
		}, nil
	}

	return &models.PostResponse{
		Message:  "Successfully retrieved all posts",
		Status:   http.StatusOK,
		DataList: posts,
	}, nil
}

// GetPostByID is the resolver for the GetPostByID field.
func (r *queryResolver) GetPostByID(ctx context.Context, id string) (*models.PostResponse, error) {
	post, err := r.PostService.GetPostByID(id)
	if err != nil {
		log.Println("getting post error: ", err)
		return &models.PostResponse{
			Message: "Something went wrong getting the post",
			Status:  http.StatusInternalServerError,
		}, nil
	}

	return &models.PostResponse{
		Message: "Successfully retrieved post",
		Status:  http.StatusOK,
		Data:    post,
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
